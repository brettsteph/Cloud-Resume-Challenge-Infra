name: "Terraform"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  # job-python-test:
  #   name: "Test lambda python function"
  #   runs-on: ubuntu-latest
  #   environment: production    
  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   strategy:
  #     matrix:
  #       # Run in all these versions of Python
  #       python-version: [3.8, 3.9]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       # Setup which version of Python to use
  #     - name: Set Up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #       # Display the Python version being used
  #     - name: Display Python version
  #       run: python -c "import sys; print(sys.version)"
  #       # Install the package using the setup.py
  #     - name: Install package
  #       run: python setup.py install
  #       # Install pytest (you can use some other testing utility)
  #     - name: Install pytest
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pytest
  #       # Run the tests. I'm using pytest and the file is in the tests directory.
  #     - name: Run tests
  #       run: pytest tests/test*
        

  job-backend:
    name: "Terraform backend"
    runs-on: ubuntu-latest
    env:
      # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # TF_ACTION_WORKING_DIR: "frontend"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.1.8
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd backend && terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Validate the configuration files
      - name: Terraform Validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false
        continue-on-error: true

      #  Add a comment to the pull request with the results of the format, init and plan steps. In addition, it displays the plan output (steps.plan.outputs.stdout)
      - name: Update Pull Request
        uses: actions/github-script@6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        # Only run when a commit is pushed to main
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  
  job-frontend:
    name: "Terraform Frontend"
    needs: job-backend
    runs-on: ubuntu-latest
    env:
      # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # TF_ACTION_WORKING_DIR: "frontend"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: cd frontend && terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Validate the configuration files
      - name: Terraform Validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false
        continue-on-error: true

      #  Add a comment to the pull request with the results of the format, init and plan steps. In addition, it displays the plan output (steps.plan.outputs.stdout)
      - name: Update Pull Request
        uses: actions/github-script@6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

        # On push to main, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        # Only run when a commit is pushed to main
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        # run: exit 1

  # job-copy-files-from-other-repo:
  #   name: copy website files from external repo
  #   # if: github.event_name == 'push'
  #   needs: job-build
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      
  #     - name: Get API Gateway ID and store in environmnt variable
  #       run: git checkout git@github.com:username/repoA.git


  # job-sync-site:
  #   name: sync website files to s3 bucket
  #   if: github.event_name == 'push'
  #   needs: job-build
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #     - name: Set AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  #         AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #         AWS_REGION: "us-east-1" # optional: defaults to us-east-1
  #         # SOURCE_DIR: "resume-site" # optional: defaults to entire repository

  #     - name: Get API Gateway ID and store in environmnt variable
  #       run: echo rest_api_id=aws apigateway get-rest-apis --query 'items[?name==`${{secrets.AWS_API_GATEWAY_NAME}}`].id' --output text >> $GITHUB_ENV

  #     - name: Export API invoke url to a JavaScript file
  #       run: echo const API = {{ env.rest_api_id }}.execute-api.us-east-1.amazonaws.com/prod > ./website/invoke-url.js

  #     - name: Copy to S3
  #       run: aws s3 sync . s3://{AWS_S3_BUCKET}" --exclude '.gitignore' --exclude '.git*/*' --follow-symlinks --delete
  #       env:
  #         AWS_S3_BUCKET: ${{secrets.AWS_S3_BUCKET}}
  #         # AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  #         # AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #         # AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1

  #       # run: aws s3 sync . s3://${{secrets.AWS_S3_BUCKET}} --exclude ".git*, .terraform, files"

  # job-invalidate-cdn:
  #   name: Invalidate CloudFront
  #   if: github.event_name == 'push'
  #   needs: job-upload-site
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
  #     - name: Set AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  #         AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #         AWS_REGION: "us-east-1" # optional: defaults to us-east-1
  #     - name: Store Cloudfront Distribution Id in env variable
  #       run: echo distribution_id=aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin==${{secrets.AWS_S3_BUCKET}}].id" --output text >> $GITHUB_ENV
  #     - name: Invalidate Cloudfront
  #       run: aws cloudfront create-invalidation --distribution-id ${{ env.distribution_id }} --paths "/*"

     